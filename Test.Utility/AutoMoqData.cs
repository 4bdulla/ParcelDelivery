using AutoFixture;
using AutoFixture.AutoMoq;
using AutoFixture.Xunit2;


namespace Test.Utility;

public class AutoMoqDataAttribute(params ICustomization[] customizations) : AutoDataAttribute(() =>
{
    IFixture fixture = new Fixture().Customize(new AutoMoqCustomization { ConfigureMembers = true });

    return customizations.Aggregate(fixture, (current, customization) => current.Customize(customization));
});

/// <summary>
/// Provides auto-generated (generated by AutoFixture) and manual data to methods with Theory attribute.
/// </summary>
public class InlineAutoMoqDataAttribute : InlineAutoDataAttribute
{
    /// <summary>
    /// Provides auto-generated (generated by AutoFixture) and manual data (if provided with <paramref name="objects"/>) to methods with Theory attribute.
    /// </summary>
    /// <param name="customizationType">type of ICustomization implementation</param>
    /// <param name="objects">manual test parameters</param>
    public InlineAutoMoqDataAttribute(Type customizationType, params object[] objects)
        : base(new AutoMoqDataAttribute(Activator.CreateInstance(customizationType) as ICustomization ??
                throw new InvalidOperationException(nameof(AutoMoqDataAttribute))),
            objects) { }

    /// <summary>
    /// Provides auto-generated (generated by AutoFixture) and manual data (if provided with <paramref name="objects"/>) to methods with Theory attribute.
    /// </summary>
    /// <param name="objects">manual test parameters</param>
    public InlineAutoMoqDataAttribute(params object[] objects) : base(new AutoMoqDataAttribute(), objects) { }
}